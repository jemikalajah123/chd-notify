# CI - CD workflow for notification service
# Handles CI for push to stage and master branch
name: notification-service CI - CD
on:
  push:
    branches:
      - stage
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: |
          npm install --force
  build-stage:
    name: Build-Staging
    runs-on: ubuntu-latest
    needs: test
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    if: ${{ github.ref == 'refs/heads/stage' }}
    steps:
      - name: Checkout ${{ steps.extract_branch.outputs.branch }}
        uses: actions/checkout@v2
        with:
          ref: stage
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "AKIASKHVHIWZJOGEQDOW"
          aws-secret-access-key: "TaTLYzXKUYUbZKVRL0lsdxkAYHJS0vdJqcDLYYro"
          aws-region: us-east-1  # Replace with your desired AWS region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: investnaija
        run: |
          docker build -t $ECR_REPOSITORY/stage/notificationbe:$(echo $GITHUB_SHA | head -c7) .
          docker push $ECR_REPOSITORY/stage/notificationbe:$(echo $GITHUB_SHA | head -c7)
  build-prod:
    name: Build-Production
    runs-on: ubuntu-latest
    needs: test
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - name: Checkout ${{ steps.extract_branch.outputs.branch }}
        uses: actions/checkout@v2
        with:
          ref: master
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: investnaija
        run: |
          docker build -t $ECR_REPOSITORY/production/notificationbe:$(echo $GITHUB_SHA | head -c7)  -f Dockerfile.prod .
          docker push $ECR_REPOSITORY/production/notificationbe:$(echo $GITHUB_SHA | head -c7)

  deploy-stage:
    name: Deploy-Staging
    runs-on: ubuntu-latest
    needs: build-stage
    if: ${{ github.ref == 'refs/heads/stage' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: stage

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "AKIASKHVHIWZJOGEQDOW"
          aws-secret-access-key: "TaTLYzXKUYUbZKVRL0lsdxkAYHJS0vdJqcDLYYro"
          aws-region: eu-west-2  # Replace with your desired AWS region

      - name: Update deployment file
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          sed -i 's|<IMAGE>|investnaija/stage/notificationbe:'${TAG}'|' $GITHUB_WORKSPACE/config/staging-deployment.yml

      - name: Deploy to AWS EKS
        run: |
          aws eks update-kubeconfig --name staging-chd --region eu-west-2  # Replace with your EKS cluster name and region
          kubectl apply -f $GITHUB_WORKSPACE/config/staging-deployment.yml

      - name: Verify deployment
        run: kubectl rollout status deployment/notificationbe

  deploy-prod:
    name: Deploy-production 
    runs-on: ubuntu-latest
    needs: build-prod
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Replace with your desired AWS region

      - name: Update deployment file
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/production/notificationbe:'${TAG}'|' $GITHUB_WORKSPACE/config/prod-deployment.yml

      - name: Deploy to AWS EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region us-east-1  # Replace with your EKS cluster name and region
          kubectl apply -f $GITHUB_WORKSPACE/config/prod-deployment.yml

      - name: Verify deployment
        run: kubectl rollout status deployment/notificationbe